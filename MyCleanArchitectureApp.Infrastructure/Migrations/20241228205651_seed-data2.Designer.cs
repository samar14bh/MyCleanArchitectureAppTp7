// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyCleanArchitectureApp.Infrastructure;

#nullable disable

namespace MyCleanArchitectureApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241228205651_seed-data2")]
    partial class seeddata2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CustomerMovie", b =>
                {
                    b.Property<int>("FavoriteCustomersId")
                        .HasColumnType("int");

                    b.Property<int>("FavoriteMoviesId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteCustomersId", "FavoriteMoviesId");

                    b.HasIndex("FavoriteMoviesId");

                    b.ToTable("CustomerMovie");
                });

            modelBuilder.Entity("MyCleanArchitectureApp.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Jane Smith"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Michael Johnson"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Emily Davis"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sarah Brown"
                        });
                });

            modelBuilder.Entity("MyCleanArchitectureApp.Domain.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Romance"
                        });
                });

            modelBuilder.Entity("MyCleanArchitectureApp.Domain.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            AverageRating = 9.0,
                            GenreId = 1,
                            Name = "The Dark Knight"
                        },
                        new
                        {
                            Id = 2,
                            AverageRating = 7.7000000000000002,
                            GenreId = 2,
                            Name = "The Hangover"
                        },
                        new
                        {
                            Id = 3,
                            AverageRating = 8.8000000000000007,
                            GenreId = 5,
                            Name = "Inception"
                        },
                        new
                        {
                            Id = 4,
                            AverageRating = 9.1999999999999993,
                            GenreId = 3,
                            Name = "The Godfather"
                        },
                        new
                        {
                            Id = 5,
                            AverageRating = 6.7999999999999998,
                            GenreId = 4,
                            Name = "It"
                        },
                        new
                        {
                            Id = 6,
                            AverageRating = 7.7999999999999998,
                            GenreId = 6,
                            Name = "Titanic"
                        });
                });

            modelBuilder.Entity("MyCleanArchitectureApp.Domain.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CustomerMovie", b =>
                {
                    b.HasOne("MyCleanArchitectureApp.Domain.Customer", null)
                        .WithMany()
                        .HasForeignKey("FavoriteCustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyCleanArchitectureApp.Domain.Movie", null)
                        .WithMany()
                        .HasForeignKey("FavoriteMoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyCleanArchitectureApp.Domain.Movie", b =>
                {
                    b.HasOne("MyCleanArchitectureApp.Domain.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MyCleanArchitectureApp.Domain.Review", b =>
                {
                    b.HasOne("MyCleanArchitectureApp.Domain.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MyCleanArchitectureApp.Domain.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MyCleanArchitectureApp.Domain.Movie", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
